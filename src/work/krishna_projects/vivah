import mysql.connector
from flask import Flask, render_template, request
conn = mysql.connector.connect(
    host='localhost',
    user='root',
    password='Root@123',
    database='matrimonial_website'
)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100),
        age INT,
        gender VARCHAR(10),
        occupation VARCHAR(100),
        city VARCHAR(100),
        email VARCHAR(100),
        password VARCHAR(100)
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS profiles (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT,
        marital_status VARCHAR(50),
        religion VARCHAR(50),
        caste VARCHAR(50),
        education VARCHAR(100),
        income INT,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )
''')
def register_user():
    name = input('Enter your name: ')
    age = int(input('Enter your age: '))
    gender = input('Enter your gender: ')
    occupation = input('Enter your occupation: ')
    city = input('Enter your city: ')
    email = input('Enter your email: ')
    password = input('Enter your password: ')
    cursor.execute('''
        INSERT INTO users (name, age, gender, occupation, city, email, password)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    ''', (name, age, gender, occupation, city, email, password))
    user_id = cursor.lastrowid
    marital_status = input('Enter your marital status: ')
    religion = input('Enter your religion: ')
    caste = input('Enter your caste: ')
    education = input('Enter your education: ')
    income = int(input('Enter your income: '))
    cursor.execute('''
        INSERT INTO profiles (user_id, marital_status, religion, caste, education, income)
        VALUES (%s, %s, %s, %s, %s, %s)
    ''', (user_id, marital_status, religion, caste, education, income))
    conn.commit()
    print('Registration successful!')
def login_user():
    email = input('Enter your email: ')
    password = input('Enter your password: ')
    cursor.execute('SELECT * FROM users WHERE email = %s AND password = %s', (email, password))
    user = cursor.fetchone()
    if user:
        print('Login successful!')
    else:
        print('Invalid email or password.')
def main_menu():
    while True:
        print('--- Matrimonial Website ---')
        print('1. Register')
        print('2. Login')
        print('3. Exit')
        choice = input('Enter your choice: ')
        if choice == '1':
            register_user()
        elif choice == '2':
            login_user()
        elif choice == '3':
            break
        else:
            print('Invalid choice. Please try again.')
main_menu()
cursor.close()
conn.close()




# Initialize Flask app
app = Flask(__name__)

# Connect to MySQL database
db = mysql.connector.connect(
    host='localhost',
    user='root',
    password='your_password',
    database='matrimonial_db'
)

# Create a cursor to interact with the database
cursor = db.cursor()

# Define routes and request handlers
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Get user data from the registration form
        name = request.form['name']
        email = request.form['email']
        gender = request.form['gender']
        # ... other form fields

        # Insert user data into the database
        query = "INSERT INTO users (name, email, gender) VALUES (%s, %s, %s)"
        values = (name, email, gender)
        cursor.execute(query, values)
        db.commit()

        return "Registration successful!"

    return render_template('register.html')

@app.route('/search')
def search():
    # Perform search queries in the database
    # Retrieve matching profiles based on user preferences
    # Display search results to the user
    return render_template('search.html')

# Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)












from flask import Flask, render_template, request, redirect
import mysql.connector

app = Flask(__name__)

# Configure MySQL connection
db = mysql.connector.connect(
    host="localhost",
    user="your_username",
    password="your_password",
    database="matrimonial_db"
)
cursor = db.cursor()


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        age = request.form['age']
        gender = request.form['gender']
        # Add more fields as per your requirements

        # Insert the user into the database
        query = "INSERT INTO users (name, age, gender) VALUES (%s, %s, %s)"
        values = (name, age, gender)
        cursor.execute(query, values)
        db.commit()

        return redirect('/success')

    return render_template('register.html')


@app.route('/success')
def success():
    return render_template('success.html')


if __name__ == '__main__':
    app.run(debug=True)








from flask import Flask, render_template, redirect, request, flash, session
from flask_mysqldb import MySQL
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, validators
from wtforms.validators import DataRequired
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required

app = Flask(__name__)
app.secret_key = 'your-secret-key'

# Configure MySQL
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'your-username'
app.config['MYSQL_PASSWORD'] = 'your-password'
app.config['MYSQL_DB'] = 'your-database-name'
mysql = MySQL(app)

# Configure Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'


# Define the User model
class User(UserMixin):
    def __init__(self, id):
        self.id = id


@login_manager.user_loader
def load_user(user_id):
    return User(user_id)


# Define the Registration form using WTForms
class RegistrationForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), validators.Email()])
    password = PasswordField('Password', validators=[DataRequired()])


@app.route('/')
def home():
    return render_template('home.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm(request.form)
    if request.method == 'POST' and form.validate():
        name = form.name.data
        email = form.email.data
        password = form.password.data

        cur = mysql.connection.cursor()
        cur.execute("INSERT INTO users(name, email, password) VALUES(%s, %s, %s)", (name, email, password))
        mysql.connection.commit()
        cur.close()

        flash('Registration successful. Please login.', 'success')
        return redirect('/login')

    return render_template('register.html', form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        cur = mysql.connection.cursor()
        result = cur.execute("SELECT * FROM users WHERE email = %s", [email])

        if result > 0:
            data = cur.fetchone()
            user_id = data['id']
            if password == data['password']:
                user = User(user_id)
                login_user(user)
                session['user_id'] = user_id
                flash('Login successful.', 'success')
                return redirect('/dashboard')
            else:
                flash('Invalid password.', 'danger')
        else:
            flash('User not found.', 'danger')

        cur.close()

    return render_template('login.html')


@app.route('/dashboard')
@login_required
def dashboard():
    user_id = session['user_id']
    cur = mysql.connection.cursor()
    result = cur.execute("SELECT * FROM users WHERE id = %s", [user_id])
    if result > 0:
        user = cur.fetchone()
        return render_template('dashboard.html', user=user)
    else:
        flash('User not found.', 'danger')
        return redirect('/login')


@app.route('/logout')
@login_required
def logout():
    logout_user()
    session.clear()
    flash('You have been logged out.', 'success')
    return redirect('/')


if __name__ == '__main__':
    app.run(debug=True)

